r"""
Semistable reduction of superelliptic curves of degree `p`


Let `K` be a field of characteritic zero and `v_K` a discrete valuation on `K`
whose residue field is finite of characteristic `p>0`. In practise, `K` will 
either be a number field or a `p`-adic number field. 

Let `f\in K[x]` be a polynomial over `K` which is not a `p`th power and whose 
radical has degree at least three. We consider the smooth projective  curve 
`Y` over `K` defined generically by the equation

.. MATH::

           Y: y^p = f(x). 

Our goal is to compute the semistable reduction of `Y` and to extract 
nontrivial arithmetic information on `Y` from this. 

More precisely, ...




AUTHORS:

- Stefan Wewers (2017-07-29): initial version


EXAMPLES::

<Lots and lots of examples>
"""

#*****************************************************************************
#       Copyright (C) 2017 Stefan Wewers <stefan.wewers@uni-ulm.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#                  http://www.gnu.org/licenses/
#*****************************************************************************

from sage.structure.sage_object import SageObject
from sage.rings.polynomial.polynomial_ring_constructor import PolynomialRing
from sage.misc.cachefunc import cached_method
from sage.rings.infinity import Infinity
from mac_lane import *
from mclf.berkovich.berkovic_line import BerkovichLine
from mclf.berkovich.affinoid_domain import AffinoidDomainOnBerkovichLine,\
           RationalDomainOnBerkovichLine




class Superp(SageObject):

    def __init__(self, f, vK, p):

        R = f.parent()
        assert R.base_ring() is v_K.domain()
        assert p == v_K.residue_field().characteristic()
        self._base_ring = R
        self._f = f
        self._base_valuation = vK
        self._p = p
        FX = FunctionField(v_K.domain(), names=R.variable_names())
        S.<T> = FX[]
        FY.<y> = FX.extension(T^p-FX(f))
        self._FX = FX
        self._FY = FY
        X = BerkovichLine(FX, vK)
        self._X = X


