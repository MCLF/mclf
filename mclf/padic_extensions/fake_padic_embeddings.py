# -*- coding: utf-8 -*-
r"""
Fake `p`-adic embeddings
========================

Let `K` and `L` be `p`-adic number fields. In this module we define a class
``FakepAdicEmbedding`` whose objects represent embeddings `\phi:K\to L` over
`\mathbb{Q}_p`.

Here the `p`-adic number fields `K` and `L` are objects of the
class ``FakepAdicCompletion``. This means that `K` and `L` represented as pairs
`(K_0,v_K)` and `(L_0,v_L)`, where e.g. `K_0` is a number field and `v_K` a
`p`-adic valuation on `K_0` such that `K` is the completion of `K_0` at `v_K`.
In fact, we do not work with actual `p`-adic numbers.

Given an embedding `\phi:K\to L`, there need not exist any embedding `K_0\to L_0`
of the underlying number fields. Therefore, the embedding `\phi` has to be
constructed in a rather indirect way. Recall that `K_0` and `L_0` are absolute
number fields generated by prime elements `\pi_K` and `\pi_L` over `\mathbb{Q}`
(with respect to `v_K` and `v_L`). So an embedding `\phi:K\to L` is uniquely
determined by a root of the absolute minimal polynomial `P_K` of `\pi_K` over
`\mathbb{Q}` in `L`. Such a root may be represented by a limit pseudo valuation
`v` on the polynomial ring `L_0[x]` with `v(P_K)=\infty`.




AUTHORS:

- Stefan Wewers (2017-08-30): initial version


EXAMPLES:



TO DO:


"""


# *****************************************************************************
#       Copyright (C) 2017 Stefan Wewers <stefan.wewers@uni-ulm.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#                  https://www.gnu.org/licenses/
# *****************************************************************************

from sage.all import SageObject, PolynomialRing, Infinity, GaussValuation
from sage.rings.valuation.limit_valuation import MacLaneLimitValuation, LimitValuation


class FakepAdicEmbedding(SageObject):
    r"""
    Return an embedding of two `p`-adic number fields.

    INPUT:

    - ``K``, ``L`` -- two `p`-adic number fields, given as objects of
      ``FakepAdicCompletion``
    - ``approximation`` - an approximation of the desired embedding

    OUTPUT: an embedding of `K` into `L` which is approximated by ``approximation``.
    If no such embedding exists, an error is raised.

    Internally, the embedding `\phi` is represented by a limit pseudo valuation
    `v` on `L_0[x]` such that `v(P_K)=\infty`. Here `K_0` and `L_0` are the
    algebraic number fields underlying `K` and `L` and `P_K` is the minimal
    polynomial of the canonical generator of `K_0` over `\mathbb{Q}`.

    An *approximation* of `\phi` is any discrete valuation `v_0` on `L_0[x]`
    which approximates `v`. This may actually be `v` itself.

    Note that the resulting embedding may not be unique, in which case an
    arbitrary embedding is chosen.

    """

    def __init__(self, K, L, approximation=None):
        if isinstance(approximation, MacLaneLimitValuation):
            # v = approximation determines phi uniquely
            v = approximation
            assert v(K.polynomial()) == Infinity, "the given approximation doesn't work"
            assert v.phi().degree() == 1, "the given limit valuation does not correspond to an embedding"
        else:
            if approximation is None:
                R = PolynomialRing(L.number_field(), 'x')
                v0 = GaussValuation(R, L.valuation())
            else:
                v0 = approximation
            # now we have to find a limit valuation v such that v(P_K)=infinity
            # which is approximated by v0
            P = R(K.polynomial())
            V = [v0]
            done = False
            while len(V) > 0 and not done > 0:
                V_new = []
                for v in V:
                    if v.phi().degree() == 1:
                        if v.effective_degree(P) == 1 or v.mu() == Infinity:
                            V_new = [v]
                            done = True
                            break
                        else:
                            V_new += v.mac_lane_step(P, assume_squarefree=True, check=False)
                V = V_new
            if len(V) == 0:
                raise AssertionError("no embedding exists")
            else:
                v = V[0]
        # now v is an approximation of an irreducible factor of P of degree 1
        v = LimitValuation(v, P)
        self._domain = K
        self._codomain = L
        self._limit_valuation = v

    def __repr__(self):
        return "an embedding of {} into {}".format(self.domain(), self.codomain())

    def domain(self):
        return self._domain

    def codomain(self):
        return self._codomain

    def limit_valuation(self):
        return self._limit_valuation

    def precompose_with(self, psi):
        pass

    def postcompose_with(self, psi):
        pass

    def approximate_generator(self, t=None):
        r""" Return an approximation of the image of the generator of the domain.

        INPUT:

        - ``t`` -- a positive rational number, or ``None`` (default: ``None``)

        OUTPUT: an approximation `\pi_0` of `\phi(\pi_K)`, up to precision `t`.

        Here `\phi:K\to L` is this embedding, `\pi_K\in K_0` is the generator of
        the number field underlying the domain `K` and `\pi_0\in L_0` is an
        element of the number field `L_0` underlying the codomain `L`, such that

        .. MATH::

            v_L(\pi_0-\phi(\pi_K)) > t.

        If `t` is not given, then the approximation of `\pi_K` used for the
        previous call of this method is returned. It is guaranteed to determine
        the embedding uniquely.

        """
        L = self.codomain()
        e = L.valuation()(L.p())
        if not hasattr(self, "_pi0"):
            # first call of this method; we have to compute some approximation
            v = self.limit_valuation()
            phi = v._approximation.phi()
            t0 = v(phi)
            self._pi0 = L.reduce(-phi[0], (e*t0).ceil())
            self._t0 = t0
        if self._t0 <= t:
            # we have to improve the current approximation
            v = self.limit_valuation()
            v._improve_approximation()
            while v(v._approximation.phi()) <= t:
                v._improve_approximation()
            phi = v._approximation.phi()
            self._pi0 = L.reduce(-phi[0], (e*t).ceil())
            self._t0 = v(phi)
        return self._pi0

    def approximate_evaluation(self, alpha, s):
        r""" Return an approximation of this embedding on an element.

        INPUT:

        - ``alpha`` -- an element of the number field `K_0`approximating the domain `K`
        - ``s`` -- a positive rational number

        OUTPUT:

        an approximation `\alpha_0` of the image of `\alpha under this embedding
        `\phi:K\to L`, with the guaranteed precision `s`. This means that

        .. MATH::

            v_L(\alpha_0 - \phi(\alpha)) > s.

        """
        K = self.domain()
        L = self.codomain()
        e = L.valuation()(L.p())
        assert alpha in K.number_field(), "alpha must be an element of the underlying number field of the domain"
        if alpha.is_rational():
            return L.number_field()(alpha)
        pi = K.generator()
        f = alpha.polynomial()
        assert f(pi) == alpha
        R = f.parent()
        S = PolynomialRing(R, 'T')
        F = f(R.gen() + S.gen())
        v = self.limit_valuation()
        t = max((s-v(F[i])/i) for i in range(1, F.degree() + 1))
        pi0 = self.approximate_generator(t)
        return L.reduce(f(pi0), (e*t).ceil())

    def approximate_polynomial(self, f, s):
        r""" Return an approximation of the image of a polynomial under this embedding.

        INPUT:

        - ``f`` -- a polynomial in `K_0[x]`
        - ``s`` -- a positive rational number

        Here `K_0` is the number field underlying the domain of this embedding.

        OUTPUT: a polynomial `f_0 \in L_0[x]`, where `L_0` is the number field
        underlying the codomain of this embedding `\phi:K\to L`, such that

        .. MATH::

            v_L(f_0-\phi(f)) > s.

        """
        R_K = f.parent()
        assert R_K.base_ring() == self.domain().number_field()
        L0 = self.codomain().number_field()
        return f.map_coefficients(lambda c: self.approximate_evaluation(c, s), L0)
